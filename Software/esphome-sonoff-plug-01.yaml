# -------------------------------------------------------------------------------------------------------------------------------------------
#
# Copyright 2023, Rob Latour
#
# License: MIT
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
# 
# -------------------------------------------------------------------------------------------------------------------------------------------
#
# Important note: There are always risks associated with turning off power to a device without an ordered shutdown having first being completed. These risks are present when using this sketch.  
#
# -------------------------------------------------------------------------------------------------------------------------------------------
#
# In more detail 
# This software monitors Home Assistant and if Home Assistant becomes unresponsive to the device running this software for greater than 30 minutes then the device running this software powers off its relay and then powers it back on after 20 seconds - effectively power cycling the hardware on which Home Assistant is running.
#
# For this to work as intended 
# the device running Home Assistant must be plugged into the device running this software.  Also, the device running this software must have a Wi-Fi connection through to Home Assistant and be able to monitor that Home Assistant is running.
#
# If this software cannot access Wi-Fi** it will assume that Home Assistant is otherwise running just fine (this to prevent a power cycling of the device running Home Assistant simply because Wi-Fi is down).
#
# This software automatically turns on the relay of the device running this software
# 20 seconds after it has been turned off.
#
# Recommendation for first time use:
#
# Ensure the device running this software has access to Home Assistant at the location it will be used before it is used to control power to the device running Home Assistant.
#
# To do this is to plug the device running this software into to the power outlet that you intended to use with it, but do not yet plug anything into the device running this software.
#
# Next, use ESPHOME's log feature to view the logs of the device running this software and confirm that you are seeing the messages 'Wi-Fi is connected' and 'Home Assistant is running' before plugging the device running Home Assistant into the device running this software.
#
# A helpful video 
# on how to install ESPHome on a SONOFF S31 Lite can be found here:
# https://www.youtube.com/watch?v=S4-HVYPCA2c
#

esphome:
  name: esphome-sonoff-plug-01
  friendly_name: Home Assistant power plug

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0 # (UART logging interferes with cse7766)

# Enable Home Assistant API
api:
  encryption:
    key: "Your key goes here"
  reboot_timeout: 0s

ota:
  password: "Your password goes here"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Sonoff-Plug-01"
    password: "your alternate password goes here" 

captive_portal:

globals:

 - id: minutes_without_WiFi
   type: int
   restore_value: no
   initial_value: '0'

 - id: minutes_without_Home_Asssitant
   type: int
   restore_value: no
   initial_value: '0'

 - id: thirty_minutes
   type: int
   restore_value: no
   initial_value: '30'

uart:
  rx_pin: RX
  baud_rate: 4800

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: True
    name: "Sonoff plug 01 Button"
    on_press:
      - switch.toggle: relay
  - platform: status
    name: "Sonoff S31-lite Status"

sensor:
  - platform: wifi_signal
    name: "Sonoff plug 01 WiFi Signal"
    update_interval: 60s

switch:
  - platform: gpio
    name: "Sonoff plug 01 Relay"
    pin: GPIO12
    id: relay
    restore_mode: ALWAYS_ON
    on_turn_off:
    # if this swtich is turned off, automatically turn it back on after 20 seconds
     - delay: 20s
     - lambda: id(relay).turn_on();    

time:
  - platform: sntp
    id: my_time

status_led:
  pin:
    number: GPIO13
    inverted: True

interval:
  - interval: 1min
    then:      

      # Check to see if Wi-Fi is connected
      - logger.log: 'Checking to see if WiFi is connected ...'
      - if:
         condition:
          wifi.connected:
         then:
          - lambda: 'id(minutes_without_WiFi) = 0;' 
          - logger.log: 'Wi-Fi is connected.'                  
         else:          
          - lambda: 'id(minutes_without_WiFi) = id(minutes_without_WiFi) + 1;'
          - logger.log:
              format: "Wi-Fi has not been connected for %d minutes."
              args: ['id(minutes_without_WiFi)']

      # if Wi-Fi is connected then check to see if Home Assistant is available
      # however if Wi-Fi is not connceted then assume Home Assistant would have otherwise been available if not for the Wi-Fi issues and reset the minutes_without_Home_Asssitant to zero

      - if:
         condition:
           lambda: |-
            return id(minutes_without_WiFi) == (0);
         then:
          - logger.log: 'Checking to see if Home Assistant is running ...'
          - if:
             condition:
              api.connected:
             then:
              - lambda: 'id(minutes_without_Home_Asssitant) = 0;' 
              - logger.log: 'Home Assistant is running.'                  
             else:          
              - lambda: 'id(minutes_without_Home_Asssitant) = id(minutes_without_Home_Asssitant) + 1;'
              - logger.log:
                 format: "It appears Home Assistant has not been running for %d minutes."
                 args: ['id(minutes_without_Home_Asssitant)']
         else:
            - lambda: 'id(minutes_without_Home_Asssitant) = 0;' 

      # if Home Assistant is not available for 30 minutes then turn off this plug
      # note: once this plug is turned off it will then automatically turn itself back on after 20 seconds (see above) - effectively power recycling Home Assistant
      - if:
         condition:
           lambda: |-
            return id(minutes_without_Home_Asssitant) >= id(thirty_minutes);            
         then:
          - lambda: id(relay).turn_on();  
